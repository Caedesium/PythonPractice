#This was some initial practice with functions and interating over given data.

'''BAKER'S MATCH Q1: bakers_match'''

# The variables num_people and num_cookies have already been declared for you in the bakers_match function below.

# Use the lines of pseudocode within the bakers_match function below to properly create some if/elif/else statements as necessary.

def bakers_match(num_people:int) -> int:
  num_cookies = 0
  ### YOUR CODE STARTS HERE ###
    
  if num_people >= 10:
        num_cookies = num_people * 2
  else:
        num_cookies = num_people * 3
    

  # If there are 10 or more people attending the party, you want to bake 2 cookies per person. Be sure to set the variable num_cookies to the correct value.
     

  # If there are less than 10 people attending the party, you want to bake 3 cookies per person. Be sure to set the variable num_cookies to the correct value.



  ### YOUR CODE ENDS HERE ###
  return num_cookies

'''TESTING FOR BAKERS MATCH'''
# To test your implementation of Bakers Match uncomment the next two lines and edit the value stored in test_num_people as if it were going to be stored in the num_people variable above
test_num = 1
print(bakers_match(test_num))




# ---------------------------------------------------------------------- #
'''IF/ELSE'N Q1: complicated'''

# The variables you, u, and next_lyric have been declared for you in the complicated function definition below.

# Use the lines of pseudocode within the complicated function below to properly create some if/elif/else statements as necessary.

def complicated(you: str, u: str) -> str:
  next_lyric = ""
  ### YOUR CODE STARTS HERE ###

  
  # If the value assigned to you is equal to "fall" and the value assigned to u is equal to "crawl", then the variable next_lyric should be assigned to the value "and you break"
    
  if you == "fall" and u == "crawl":
        next_lyric = "and you break"
  elif you == "take" and u == "get":
        next_lyric = "you turn it into"
  else:
        next_lyric = "No, no, no"

  # If the value assigned to you is equal to "take" and the value assigned to u is equal to "get", then the variable next_lyric should be assigned to the value "you turn it into"


  # Otherwise, the variable next_lyric should be assigned to "No, no, no"



  ### YOUR CODE ENDS HERE ###
  return next_lyric

'''TESTING FOR COMPLICATED'''
# In order to test your implementation of complicated uncomment the next three lines and edit the values stored in test_you and test_u as if they were going to be stored in the you and u variables above
test_you = "fall"
test_u = "crawl"
print(complicated(test_you, test_u))




# ---------------------------------------------------------------------- #
'''IF/ELSE'N Q2: mcgonagall'''
# The variables character and catchphrase have been declared for you in the mcgonagall function definition below.

# Use the lines of pseudocode within the mcgonagall function below to properly create some if/elif/else statements as necessary.

def mcgonagall(character: str) -> str:
  catchphrase = ""
  ### YOUR CODE STARTS HERE ###


  # If the value for character is "Harry" then set the variable named catchphrase to "Expecto Patronum"

    
  if character == "Harry":
        catchphrase = "Expecto Patronum"
  elif character == "Hermione":
        catchphrase = "It's LeviOsa"
  elif character == "Ron":
        catchphrase = "Wicked"
  else:
        catchphrase = "Why is it always you three?"
    


  # Otherwise, if the value for character is "Hermione", then set the variable named catchphrase to "It's LeviOsa"


  # Otherwise, if the value for character is "Ron" then set the variable named catchphrase to "Wicked"


  # Otherwise, set the variable named catchphrase to the value "Why is it always you three?"



  ### YOUR CODE ENDS HERE ###
  return catchphrase

'''TESTING FOR MCGONAGALL'''
# In order to test your implementation of mcgonagall uncomment the next two lines and edit the value stored in test_character as if it were going to be stored in the character variable above
test_character = "Harry"
print(mcgonagall(test_character))




# ---------------------------------------------------------------------- #
'''IF/ELSE'N Q3: jurassic'''

# The variables dino and output_line have been declared for you in the jurassic function definition below.

# Use the lines of pseudocode within the jurassic function below to properly create some if/elif/else statements as necessary.

def jurassic(dino: str) -> str:
  output_line = ""
  ### YOUR CODE STARTS HERE ###


  # Declare a variable chance and set it equal to 0
  chance = 0

  # If the value for dino is set to "Brachiosaurus", then set the variable chance to 90
  if dino == "Brachiosaurus":
        chance = 90
  
  # Otherwise, if the value for dino is set to "Triceratops", then set the variable chance to 65
  elif dino == "Triceratops":
        chance = 65
  
  # Otherwise, if the value for dino is set to "Velociraptor", then set the variable chance to 10
  elif dino == "Velociraptor":
        chance = 10
  
  # Otherwise, if the value for dino is set to "Tyrannosaurus", then set the variable chance to 0
  elif dino == "Tyrannosaurus":
        chance = 0

  # Finally, set a variable named output_line to the string "Your chance of surviving a <DINO> attack is <CHANCE>%"
  output_line = f"Your chance of surviving a {dino} attack is {chance}%"


  ### YOUR CODE ENDS HERE ###
  return output_line

'''TESTING FOR JURASSIC'''
# In order to test your implementation of jurassic uncomment the next two lines and set the value of test_dino as if it were going to be passed into the dino variable above.
test_dino = "Brachiosaurus"
print(jurassic(test_dino))




# ---------------------------------------------------------------------- #
'''IF/ELSE'N Q4: good_vs_evil'''

# The variables hero, villain, hero_power_level, villian_power_level, and result have been declared for you in the good_vs_evil function definition below.

# Use the lines of pseudocode within the good_vs_evil function below to properly create some if/elif/else statements as necessary.

def good_vs_evil(hero: str, villain: str, hero_power_level: int, villain_power_level: int) -> str:
  result = ""
  ### YOUR CODE STARTS HERE ###


  # If hero_power_level is higher than villain_power_level, set the variable named result to "<HERO> defeats <VILLAIN> in battle!"
  if hero_power_level > villain_power_level:
        result = f"{hero} defeats {villain} in battle!"
  
  # Otherwise, if hero_power_level is lower than villain_power_level, set the variable named result to "<VILLAIN> defeats <HERO> in battle!"
  elif hero_power_level < villain_power_level:
        result = f"{villain} defeats {hero} in battle!"

  # Otherwise, if hero_power_level is the same as villain_power_level, set the variable named result to "<HERO> and <VILLAIN> are evenly matched."
  else:
        result = f"{hero} and {villain} are evenly matched."


  ### YOUR CODE ENDS HERE ###
  return result

'''GOOD VS EVIL TESTING'''
# In order to test your implementation ofgood_vs_evil uncomment the next five lines and set the values as if they were going to be set to their counterparts within the good_vs_evil code above.
test_hero = "neo"
test_villain = "Agent Smith"
test_hero_power_level = 2
test_villain_power_level = 1
print(good_vs_evil(test_hero, test_villain, test_hero_power_level, test_villain_power_level))
